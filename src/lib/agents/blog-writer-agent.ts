import { BaseAgent } from './base-agent';
import { AgentResult } from '../../types/agents';
import { Product, type BlogMetadata } from '../db/schema';
import { type BlogOutline } from './blog-outline-agent';
import { db } from '../db';
import { eq } from 'drizzle-orm';
import { agentConfigurations } from '../db/schema';

export class BlogWriterAgent extends BaseAgent {
  async execute(
    product: Product,
    outline: BlogOutline,
    metadata?: Partial<BlogMetadata>
  ): Promise<AgentResult<string>> {
    return this.executeWithRetry(async () => {
      // 1. Fetch Agent Configuration
      const agentConfig = await db.query.agentConfigurations.findFirst({
        where: eq(agentConfigurations.agent_type, 'blog_writer')
      });
      if (!agentConfig) throw new Error("Blog writer agent configuration not found.");

      // 2. Build the prompt by replacing placeholders in the base prompt
      const prompt = agentConfig.base_prompt
        .replace('{{PRODUCT_TITLE}}', product.title || '')
        .replace('{{PRODUCT_CAS}}', (product as any).casNumber || 'N/A')
        .replace('{{PRODUCT_FORMULA}}', (product as any).chemicalFormula || 'N/A')
        .replace('{{PRODUCT_PROPERTIES}}', (product as any).properties ? JSON.stringify((product as any).properties) : 'Refer to product datasheet')
        .replace('{{BLOG_OUTLINE}}', JSON.stringify(outline, null, 2))
        .replace('{{WRITER_PERSONA}}', metadata?.writerPersona || outline.persona || 'Technical Writer')
        .replace('{{TARGET_AUDIENCE}}', metadata?.targetAudience || outline.targetAudience)
        .replace('{{TONE}}', metadata?.blogTone || outline.tone)
        .replace('{{TECHNICAL_DEPTH}}', metadata?.technicalDepthLevel || outline.technicalDepth)
        .replace('{{ESTIMATED_WORD_COUNT}}', outline.estimatedTotalWordCount.toString())
        .replace('{{PRIMARY_KEYWORD}}', outline.seoElements.primaryKeyword)
        .replace('{{SECONDARY_KEYWORDS}}', JSON.stringify(outline.seoElements.secondaryKeywords))
        .replace('{{META_DESCRIPTION}}', outline.seoElements.metaDescription)
        .replace('{{INTERNAL_LINKS}}', outline.seoElements.internalLinkSuggestions?.[0] || '/placeholder-internal-link')
        .replace('{{EXTERNAL_LINKS}}', outline.seoElements.externalLinkSuggestions?.[0] || 'https://example.com/source')
        .replace('{{CTA_TEXT}}', outline.cta.text)
        .replace('{{CTA_LINK}}', outline.cta.linkPlaceholder || '');

      // 3. Call the LLM
      const result = await this.geminiPro.generateContent(prompt);
      const response = await result.response;
      const content = response.text();

      if (!content || content.trim() === "") {
        throw new Error('No content generated by BlogWriterAgent');
      }

      await this.logActivity(
        'blog_writing',
        'blog_outline',
        outline.title.substring(0, 50),
        'write_blog_post_from_outline',
        { 
          productId: product.id, 
          blogTitle: outline.title,
          metadata: metadata || {}
        },
        true,
        Math.floor((prompt.length + content.length) / 4)
      );

      return content;
    }, 'Write blog post from outline');
  }
} 