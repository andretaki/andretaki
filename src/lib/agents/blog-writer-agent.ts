import { BaseAgent } from './base-agent';
import { AgentResult } from '../../types/agents';
import { Product } from '../db/schema';
import { type BlogOutline } from './blog-outline-agent'; // Import the Zod-derived type

export class BlogWriterAgent extends BaseAgent {
  async execute(
    product: Product,
    outline: BlogOutline // Use the richer outline type
  ): Promise<AgentResult<string>> {
    return this.executeWithRetry(async () => {
      const prompt = this.buildPrompt(product, outline);
      // Using Gemini Pro as in the original code
      const result = await this.geminiPro.generateContent(prompt);
      const response = await result.response;
      const content = response.text();

      if (!content || content.trim() === "") {
        throw new Error('No content generated by BlogWriterAgent');
      }

      await this.logActivity(
        'blog_writing',
        'blog_outline', // Entity is the outline it worked on
        outline.title.substring(0, 50), // Use outline title as a reference ID
        'write_blog_post_from_outline',
        { productId: product.id, blogTitle: outline.title },
        true,
        // TODO: Add token count tracking for Gemini if API provides it
        // For now, estimate based on input/output length if necessary for rough tracking
        (prompt.length + content.length) / 4 // Very rough token estimation
      );

      return content; // This should be the markdown string
    }, 'Write blog post from outline');
  }

  private buildPrompt(product: Product, outline: BlogOutline): string {
    return `
      You are an expert ${outline.persona || 'Technical Writer'} tasked with writing a compelling and informative blog post.
      Strictly adhere to the provided JSON outline and all its specifications.

      Product Focus: ${product.title}
      - CAS Number: ${product.casNumber || 'N/A'}
      - Chemical Formula: ${product.chemicalFormula || 'N/A'}
      - Key Properties: ${product.properties ? JSON.stringify(product.properties) : 'Refer to product datasheet'}

      Blog Post Outline & Instructions:
      ${JSON.stringify(outline, null, 2)}

      Writing Task:
      Expand the provided outline into a full blog post of approximately ${outline.estimatedTotalWordCount} words.
      
      Key Instructions (Follow Strictly):
      1.  **Adherence to Outline**: Each section of your blog post MUST correspond to a section in the outline. Use the 'title' from the outline section as your H2 heading. Expand on every 'point' listed under each section. Incorporate 'keyTakeaways' naturally.
      2.  **Persona and Tone**: Maintain the specified 'persona' ("${outline.persona}") and 'tone' ("${outline.tone}") throughout the article.
      3.  **Target Audience**: Write for the 'targetAudience' ("${outline.targetAudience}"). Adjust complexity and examples accordingly.
      4.  **Technical Depth**: Ensure the content matches the 'technicalDepth' ("${outline.technicalDepth}"). 
          - For 'beginner': Explain jargon, use analogies, keep it simple.
          - For 'intermediate': Assume some foundational knowledge, explain moderately complex topics.
          - For 'expert': Use precise terminology, delve into complex details, assume high prior knowledge.
      5.  **Content Quality**:
          - Provide accurate, up-to-date information. If a specific data point is needed but not provided, use a placeholder like "[Insert specific data for X]" or research it if feasible and you are confident.
          - Make the content engaging, well-structured, and easy to read. Use smooth transitions between paragraphs and sections.
      6.  **SEO Integration**:
          - Naturally weave the 'primaryKeyword' ("${outline.seoElements.primaryKeyword}") into the text, especially in the introduction, conclusion, and some headings if appropriate.
          - Subtly incorporate 'secondaryKeywords' (${JSON.stringify(outline.seoElements.secondaryKeywords)}) where relevant.
          - The overall content should strongly support the provided 'metaDescription': "${outline.seoElements.metaDescription}".
      7.  **Markdown Formatting**:
          - Use H1 for the main blog title (which is "${outline.title}").
          - Use H2 for section titles from the outline. Use H3 or H4 for sub-headings if necessary for clarity within a section.
          - Use standard markdown for lists (bullet/numbered), bold, italics, blockquotes, etc.
          - For chemical formulas (e.g., \`${product.chemicalFormula || 'H2O'}\`) or CAS numbers, use inline code (\`text\`).
          - If tables are appropriate for data, use markdown table syntax.
      8.  **Linking**:
          - If 'internalLinkSuggestions' are provided, integrate them naturally into the text. For example: "For more details on [linked text], see our [page](${outline.seoElements.internalLinkSuggestions?.[0] || '/placeholder-internal-link'})."
          - Similarly for 'externalLinkSuggestions': "According to [Authoritative Source](${outline.seoElements.externalLinkSuggestions?.[0] || 'https://example.com/source'}), this process..."
      9.  **Call to Action**: End the blog post with the specified CTA: "${outline.cta.text}". If a 'linkPlaceholder' is given, format it as a markdown link: "[${outline.cta.text}](${outline.cta.linkPlaceholder})".
      10. **Word Count**: Strive to meet the 'estimatedWordCount' for each section and the 'estimatedTotalWordCount'.
      11. **Review and Refine**: Before concluding, mentally review your generated post. Does it fulfill all aspects of the outline? Is it coherent, accurate, and engaging for the target audience? Make one pass of improvements.

      Output only the complete blog post in Markdown format. Do not include any pre-amble, post-amble, or conversational text outside the Markdown document.
      Start directly with "# ${outline.title}".
    `;
  }
} 